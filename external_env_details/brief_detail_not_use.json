{
  "Perplexity": {
    "Input": "A simple query (string, required) that requires searching the web.",
    "Output": "A compiled answer based on web search results.",
    "Use": "As a web search engine to retrieve and synthesize information from multiple sources into a single, concise response."
  },
  "PlotAgent": {
    "Input": "A query (string, required) which also includes the relevant response from Perplexity.",
    "Output": "If plots are generated, it returns the location where plots are saved and a plot explanation string; otherwise, it returns 'Fail.'",
    "Use": "For queries that can be visualized through graphs or charts. If initial information is insufficient, it triggers a Perplexity search for more data. It can skip plotting if it determines that plotting does not make sense."
  },
  "TextToImage": {
    "Input": "A prompt (string, required) describing an image.",
    "Output": "A location where the image generated based on the input prompt, is saved.",
    "Use": "For generating visually compelling illustrations or images that enhance and complement the response, especially when plots are not appropriate."
  },
  "Open-Meteo": {
  "Input": "The API requires the following input parameters:- latitude (float, required): WGS84 latitude coordinate of the location.- longitude (float, required): WGS84 longitude coordinate of the location.Optional parameters that may require your input:- hourly (array of strings, optional): Specify hourly weather variables to include in the response (e.g., `temperature_2m`, `wind_speed_10m`).- daily (array of strings, optional): Specify daily weather variables to include in the response (e.g., `temperature_2m_max`, `precipitation_sum`).- current_weather (boolean, optional): Set to `true` to include current weather data.",
  "Output": "The API returns a JSON object containing weather forecast data for the specified location. The output includes:- latitude (float): Latitude of the weather grid cell used.- longitude (float): Longitude of the weather grid cell used.- elevation (float): Elevation in meters of the selected weather grid cell.- hourly (object, if requested): Contains arrays of hourly data for each requested weather variable.  - time (array of strings): Timestamps corresponding to hourly data points.  - [weather variables]: Arrays of values for each requested hourly variable.- daily (object, if requested): Contains arrays of daily data for each requested weather variable.  - time (array of strings): Dates corresponding to daily data points.  - [weather variables]: Arrays of values for each requested daily variable.- current_weather (object, if requested): Current weather conditions including:  - time (string): Timestamp of the current weather data.  - temperature (float): Current temperature.  - wind_speed (float): Current wind speed.  - wind_direction (float): Current wind direction.  - weather_code (integer): Code representing the current weather condition.",
  "Use": "This API is used to retrieve a 7-day weather forecast for any location worldwide, specified by latitude and longitude coordinates. Users can customize the response by selecting specific hourly and daily weather variables or include current weather data. The API is suitable for applications that require weather information for forecasting, event planning, environmental monitoring, or integrating weather data into services."
  },
  "NEWS_API": {
  "Input": "The API requires the following input parameters:- q (string, required): The search query or keywords. You can also use operators like AND, OR, NOT.Optional parameters that may require your input:- from (date, optional): The start date for the results. Articles older than this date will not be returned.- to (date, optional): The end date for the results. Articles published after this date will not be returned.- sortBy (string, optional): The sorting order for the results. Options include 'relevancy', 'popularity', and 'publishedAt'.- language (string, optional): The language of the articles returned. Supported options include 'en', 'es', 'de', 'fr', and more.- domains (string, optional): Restrict articles to specific domains (e.g., 'techcrunch.com, engadget.com').- excludeDomains (string, optional): Exclude articles from specific domains.- pageSize (integer, optional): The number of results per page. Maximum is 100.- page (integer, optional): Use this to paginate through results.",
  "Output": "The API returns a JSON object containing news articles that match the search query. The output includes:- status (string): 'ok' if the request was successful.- totalResults (integer): The total number of results available for your request.- articles (array): A list of article objects. Each article includes:  - source (object): The identifier and name of the news source.    - id (string): The unique identifier of the news source.    - name (string): The name of the news source.  - author (string): The author of the article.  - title (string): The headline or title of the article.  - description (string): A short description or summary of the article.  - url (string): The direct URL to the full article.  - urlToImage (string): The URL to a relevant image for the article.  - publishedAt (string): The date and time the article was published in ISO 8601 format.  - content (string): The content of the article, truncated to 200 characters.",
  "Use": "This API endpoint is used to search for news articles published by over 150,000 news sources within the past 5 years. It allows for detailed news analysis or discovery across a wide range of topics. Ideal for applications that require news aggregation, content analysis, or displaying news articles based on specific search queries and filters."
  },
  "NEWS_API_TOP_HEADLINES": {
  "Input": "The API requires the following input parameters:- apiKey (string, required): Your API key to authenticate the request. You have to set atleast any one of the following parameters: sources, q, language, country, category. Optional parameters that may require your input:- country (string, optional): Returns headlines from a specific country (e.g., 'us', 'gb', 'fr').- category (string, optional): Filters news by category. Available options: 'business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology'.- sources (string, optional): Returns headlines from specific news sources or blogs. Use the '/sources' endpoint to retrieve valid source identifiers.- q (string, optional): Keywords or phrases to search within headlines and descriptions.- pageSize (integer, optional): The number of results per page. Maximum is 100.- page (integer, optional): Use this to paginate through results.",
  "Output": "The API returns a JSON object containing the top news headlines. The output includes:- status (string): 'ok' if the request was successful.- totalResults (integer): The total number of results available for your request.- articles (array): A list of article objects. Each article includes:  - source (object): The identifier and name of the news source.    - id (string): The unique identifier of the news source.    - name (string): The name of the news source.  - author (string): The author of the article.  - title (string): The headline or title of the article.  - description (string): A short description or summary of the article.  - url (string): The direct URL to the full article.  - urlToImage (string): The URL to a relevant image for the article.  - publishedAt (string): The date and time the article was published in ISO 8601 format.  - content (string): The content of the article, truncated to 200 characters.",
  "Use": "This API endpoint is used to retrieve the latest breaking news headlines from various sources, blogs, and categories. It's ideal for applications that need to display current news, monitor events, or provide users with up-to-date informations. It is generic and should majorly be used for retrieving top headlines"
  },
  "Stack_Exchange_Questions": { 
      "Input": "The API requires the following input parameters:- site (string, required): The Stack Exchange site to query (e.g., 'stackoverflow').Optional parameters that may require your input:- tagged (string, optional): Filter questions by tags (e.g., 'python;django').- sort (string, optional): Sort criteria ('activity', 'votes', 'creation', etc.).- order (string, optional): Sorting order ('asc' or 'desc').- fromdate, todate (integer, optional): Unix timestamps to filter questions by creation date.- page (integer, optional): Page number for paginated results.- pagesize (integer, optional): Number of results per page (maximum 100).", 
      "Output": "The API returns a JSON object containing a list of questions and metadata. The output includes:- items (array): A list of question objects. Each question includes: - question_id (integer): Unique identifier for the question. - title (string): The question title. - link (string): URL to the question. - creation_date (integer): Unix timestamp when the question was created. - last_activity_date (integer): Unix timestamp of the last activity. - score (integer): Net vote count. - view_count (integer): Number of times the question has been viewed. - answer_count (integer): Number of answers the question has received. - is_answered (boolean): Indicates if the question has been answered. - tags (array of strings): Tags associated with the question. - owner (object): Information about the user who asked the question, including: - user_id (integer) - display_name (string) - profile_image (string) - link (string)- has_more (boolean): Indicates if more results are available beyond the current page.- quota_max (integer): The daily request quota limit.- quota_remaining (integer): The number of requests remaining for the day.", 
      "Use": "This API endpoint is used to retrieve questions from a specific Stack Exchange site. It allows you to fetch recent questions, search for questions based on tags and dates, sort and order questions by various criteria, and access detailed information about each question for display in applications, data analysis, or integration into services." 
  },
  "Stack_Exchange_Answers": { 
      "Input": "The API requires the following input parameters:- site (string, required): The Stack Exchange site to query (e.g., 'stackoverflow').Optional parameters that may require your input:- fromdate, todate (integer, optional): Unix epoch times to filter answers by creation date.- sort (string, optional): Sort criteria ('activity', 'creation', 'votes').- order (string, optional): Sorting order ('asc' or 'desc').- page (integer, optional): Page number for paginated results.- pagesize (integer, optional): Number of results per page (maximum 100).", 
      "Output": "The API returns a JSON object containing a list of answers and metadata. The output includes:- items (array): A list of answer objects. Each answer includes: - answer_id (integer): Unique identifier for the answer. - question_id (integer): ID of the question this answer belongs to. - is_accepted (boolean): Indicates if the answer is accepted. - score (integer): The vote score of the answer. - creation_date (integer): Unix timestamp when the answer was created. - last_activity_date (integer): Unix timestamp of the last activity. - body (string): The body content of the answer. - owner (object): Information about the user who posted the answer, including: - user_id (integer) - display_name (string) - profile_image (string) - link (string)- has_more (boolean): Indicates if more results are available.- quota_max (integer): The daily request quota limit.- quota_remaining (integer): The number of requests remaining for the day.", 
      "Use": "This API endpoint is used to retrieve answers from a specific Stack Exchange site. It allows you to fetch recent answers, sort and filter them based on various criteria, and access detailed information about each answer for display in applications, data analysis, or integration into services."
  },
  "Stack_Exchange_Users": {
      "Input": "The API requires the following input parameters:- site (string, required): The Stack Exchange site to query (e.g., 'stackoverflow').Optional parameters that may require your input:- inname (string, optional): Filter users by a substring in their display name.- sort (string, optional): Sort criteria ('reputation', 'creation', 'name', 'modified').- order (string, optional): Sorting order ('asc' or 'desc').- fromdate, todate (integer, optional): Unix timestamps to filter users by creation or modification date.- page (integer, optional): Page number for paginated results.- pagesize (integer, optional): Number of results per page (maximum 100).",
      "Output": "The API returns a JSON object containing a list of users and metadata. The output includes:- items (array): A list of user objects. Each user includes:  - user_id (integer): Unique identifier for the user.  - display_name (string): The user's display name.  - reputation (integer): The user's reputation score.  - profile_image (string): URL to the user's profile image.  - link (string): URL to the user's profile.  - creation_date (integer): Unix timestamp when the user account was created.  - last_access_date (integer): Unix timestamp of the user's last access.  - badge_counts (object): Counts of badges earned, including:    - bronze (integer)    - silver (integer)    - gold (integer)  - location (string): The user's location (if provided).  - website_url (string): The user's website URL (if provided).- has_more (boolean): Indicates if more results are available.- quota_max (integer): The daily request quota limit.- quota_remaining (integer): The number of requests remaining for the day.",
      "Use": "This API endpoint is used to retrieve user profiles from a specific Stack Exchange site. It allows you to search for users by name, filter by creation or modification dates, sort them by various criteria, and access detailed information about each user for display in applications, user analysis, or integration into services."
}
 
}