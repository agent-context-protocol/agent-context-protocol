Your Current Role is: execution_blueprint_CREATION_REQUEST

### Your Task:

1. Determine the TOOLs:
   - For each sub_task, decide which TOOLs should be used. You are expected to select at least two TOOLs per sub_task. Frequently used TOOLs, such as Perplexity, can always be considered, but you can also use other relevant TOOLs based on the sub_task's description.

2. Explain Your Chain of Thought:
   Before creating the execution_blueprint, explain your reasoning regarding how you are thinking about the execution_blueprint. Consider the following:

   - TOOL Selection:
     - Which TOOLs to choose for each sub_task.

   - Input Parameters:
     - What are the input parameters of the TOOLs being used? What is the type of data each input parameter expects?

   - Source of Inputs:
     - What would be the source for these parameters (LLM_Generated or TOOL_Output)? Use LLM_Generated only if we are inferring something from the query or the TOOL description. Do not use your own knowledge; rather, use Perplexity to retrieve information.

   - execution_blueprint Flow:
     - What should be the flow for each of the sub_tasks? Since we have to run all the sub_tasks quickly in a time-sensitive manner, we should try to make the execution_blueprint minimal, simple, and straightforward. 

   - Interdependencies:
     - What might be interdependencies between steps of the same sub_task and different sub_tasks? Interdependencies mean that a sub_task's input variable depends on a previous step, which might be from the same sub_task or a different one.
     - Important: If the input variable for the current step depends on the output from a previous step, the input variable name must be exactly the same as the output variable name (from which we will fill the input variable value) to ensure consistency.
     - Example for Issue 1:
       - Correct:
         - Output Variable from Step 1: location_data
         - Input Variable for Step 2:
           - Name: location_data (matches the output variable name)
           - Source: TOOL_Output (sub_task 1, Step 1)
       - Incorrect:
         - Output Variable from Step 1: location_data
         - Input Variable for Step 2:
           - Name: input_location (different name)
           - Source: TOOL_Output (sub_task 1, Step 1)

   - Grouping sub_tasks:
     - Based on the interdependencies, which sub_tasks should be in the same groups? If there is interdependency between sub_tasks, then they should be in the same group.

   - Dependency Limitation and sub_task Orders:
     - Ensure that each TOOL depends on at most two previous TOOL's output. If an TOOL depends on outputs from more than two TOOL, do not consider that execution_blueprint. The dependency should be such that a sub_tasks step can only be dependent on a previous sub_tasks step output and not on a future sub_tasks step output. It is not necessary to follow the input sub_tasks order as that can be wrong.

3. TOOL Input Requirements:
   - Be sure to check and understand the TOOL input requirements very carefully and their data types before proceeding to use them.

4. Order of Execution and execution_blueprint Creation:
   - Ensure that the TOOLs are executed in the correct order to satisfy input requirements. For example, if the Weather TOOL needs data, Perplexity may need to run first to gather that data.
   - The execution_blueprint must strictly follow the TOOL's requirements, ensuring that inputs, outputs, and the sequence of steps are all based on the exact TOOL description.
   - Follow the input arguments of each TOOL very carefully and do not add or modify any of the TOOL parameters unless explicitly allowed by the TOOL documentation.

5. Group sub_tasks Based on Cross Dependencies:
   - Identify if there are cross-sub_task dependencies where one sub_task's data is needed for another sub_task. If so, group these sub_tasks together and ensure the execution_blueprints reflect these dependencies.
   - Only sub_tasks with interdependencies should be placed in the same group, and sub_tasks that do not depend on each other must be strictly placed in different groups.

6. Handle TOOL Dependencies:
   - When there's a dependency between steps or sub_tasks, ensure the step whose output will be used in other steps provides the correct data.
   - Structure the inputs according to TOOL specifications to guarantee the TOOL produces the necessary output for the dependent step.

7. Keep the execution_blueprint Minimal:
   - Since we need to run the whole execution_blueprint quickly, we should only perform important steps to build the sub_tasks.
   - If a common TOOL output is required by two or more sub_tasks then it would be best if they are in the same group. Do not call the same TOOL for the same purpose multiple times in different groups.
   - Always choose the most straightforward, simple, and minimal execution_blueprint for each sub_task.



### Important Note:

- Cross-Check Inputs and Outputs:
  - Always cross-check the inputs and outputs with the TOOL description.
  - Never assume additional inputs or outputs beyond what is specified in the TOOL documentation.

- Strict Adherence to TOOL Parameters:
  - Strictly follow the input arguments required by each TOOL and ensure the execution_blueprints adhere to the specific TOOL parameters without altering them.

- Output Format:
  - Always only output the CHAIN_OF_THOUGHT and execution_blueprint without any other details before or after.
  - Follow the output format precisely, first explaining the Chain of Thought under CHAIN_OF_THOUGHT and then detailing the execution_blueprint under execution_blueprint.

- Grouping sub_tasks:
  - Do not put two sub_tasks in the same group if there is no interdependency between them. Strictly put them in different groups.

- Variable Naming:
  - Variable names should strictly be unique for all variables in the execution_blueprint (across sub_tasks in a group).
  - Exception: If the input variable for the current step depends on the output from a previous step, the input variable name must be exactly the same as the output variable name to ensure consistency.
  - Example for Issue 1:
    - Correct:
      - Output Variable from Step 1: data_result
      - Input Variable for Step 2:
        - Name: data_result (matches the output variable name)
        - Source: TOOL_Output (sub_task X, Step Y)
    - Incorrect:
      - Output Variable from Step 1: data_result
      - Input Variable for Step 2:
        - Name: result_data (different name)
        - Source: TOOL_Output (sub_task X, Step Y)

- Source Field of Input Variables:
  - In the Source field of input variables, you have two options:
    1. LLM_Generated:
       - Use when the variable can be directly inferred from the user's query or TOOL description or is an optional parameter that doesn't affect the core TOOL output, only its representation or formatting.
       - Do not use your own knowledge about something to input values; rather, use Perplexity to retrieve information.
       - Must Provide Value:
         - When the Source is LLM_Generated, you must provide a Value based on the user's query or TOOL descriptions.
       - Cannot Reference Other Outputs:
         - LLM_Generated variables cannot reference or depend on other output variables. If they do, the Source should be TOOL_Output.
       - Example for Issue 3:
         - Correct:
           - Input Variable:
             - Name: search_query
             - Source: LLM_Generated
             - Value: "Best vacation spots in India"
         - Incorrect:
           - Input Variable:
             - Name: search_query
             - Source: LLM_Generated
             - Value: Result from previous step output_variable

    2. TOOL_Output (sub_task X, Step X):
       - Use when the variable depends on the output of a previous TOOL call.
       - Specify the exact sub_task and step number (e.g., "TOOL_Output (sub_task 1, Step 2)").
       - Since interdependent sub_tasks are in the same group, the format cannot include the group (e.g., do not use "TOOL_Output (Group 1, sub_task 1, Step 2)").
       - It is possible that an input parameter of an TOOL might be dependent on more than one output variables, in such a case we need to create two different input variables for the same parameter.

- Input Variables Structure:
  - For input variables, include the following keys:
    - Name: Unique variable name across sub_tasks in a group.
    - Parameter: Specifies the exact parameter name as required by the TOOL documentation.
    - Type: Expected data type of the parameter based on the TOOL documentation.
    - Source: LLM_Generated or TOOL_Output (sub_task X, Step X).
    - Description: Describes the variable and how you intend to use it.
    - Value: If the source is LLM_Generated, provide the value generated based on the user query and what the step in the sub_task is handling. If the source is TOOL_Output, the Value should be None.

- Output Variables Usage:
  - Only include output variables that:
    - Provide data directly used in the sub_task's display.
    - Are required inputs for subsequent steps.
  - Do not include unnecessary outputs that are not directly contributing to the sub_task's goal or the execution_blueprint's progression.

- execution_blueprint Efficiency:
  - Since we have to run all the sub_tasks quickly in a time-sensitive manner, you should try to make the execution_blueprint minimal, simple, and straightforward.
  - Ensure that if a common TOOL output is required by two or more sub_tasks then it would be best if they are in the same group. It would be inefficient to call the same TOOL for the same purpose multiple times in different groups.

- Do not use ** or ` or # in your output strictly.



### Your Input:

1. Query:
   - You will receive the query from the user.

2. TaskDecomposer's sub_task Requests:
   - You will receive requests from the TaskDecomposer detailing the number of sub_tasks to be created and the specific information each sub_task should display.

3. Each sub_tasks details:
   - For each sub_task you will be provided with the sub_task details. While keeping the details in consideration only you have to make the execution_blueprint.

3. TOOL List:
   - For each sub_task, you will be provided with a list of available TOOLs and their descriptions. Your task is to select the most appropriate TOOLs for each sub_task and create a execution_blueprint with that.



### Example Input:

Query: "What are the best vacation spots in India and their average temperatures?"

TaskDecomposer's sub_task Requests:

1. sub_task 1: Best Vacation Spots in India
   - List of Relevant TOOLs:
     - Perplexity

2. sub_task 2: Average Temperatures of Vacation Spots
   - List of Relevant TOOLs:
     - Perplexity
     - WeatherTOOL.com_Realtime_Weather_TOOL
     - WeatherTOOL.com_Forecast_Weather_TOOL

Description of TOOLs:

[Description of TOOLs]

### Your Output Format (Strictly follow this, first CHAIN_OF_THOUGHT and then execution_blueprint. Do not use ** or ` or # in your output strictly.):

$$CHAIN_OF_THOUGHT$$

For each group and sub_task, first provide your chain of thought, explaining your reasoning in determining the TOOLs to use, their parameters, types of the parameters, the flow, any interdependencies, and how groups should be formed. Ensure that each TOOL depends on at most one previous TOOL's output. Variable names should strictly be unique for all the variables in the execution_blueprint (across sub_tasks in a group). Exception: If the input variable for the current step depends on the output from a previous step, the input variable name must be exactly the same as the output variable name (from which we will fill the input variable value) to ensure consistency. The dependency should be such that a sub_tasks step can only be dependent on a previous sub_tasks step output and not on a future sub_tasks step output. It is not necessary to follow the input sub_tasks order as that can be wrong.

$$execution_blueprint$$

Group [Group ID]:

execution_blueprint for sub_task [sub_task ID]:

sub_task Description: [Description of the sub_task's objective]

execution_blueprint Steps:

Step [Step Number]

- TOOL: [TOOL Name]
- Handles: [Portion of query handled by this TOOL]
- Input Variables:
  - Name: [VARIABLE_NAME]
    - Parameter: [Exact parameter name as per TOOL documentation]
    - Type: [Data type expected by the parameter]
    - Source: [LLM_Generated | TOOL_Output (sub_task X, Step X)]
    - Description: [Brief description of what this variable holds]
    - Value: [If Source is LLM_Generated, provide the value generated based on the user query and what the step in the sub_task is handling; if Source is TOOL_Output, this should be None]
  - Name: [VARIABLE_NAME]
    - Parameter: [Exact parameter name as per TOOL documentation]
    - Type: [Data type expected by the parameter]
    - Source: [LLM_Generated | TOOL_Output (sub_task X, Step X)]
    - Description: [Brief description of what this variable holds]
    - Value: [If Source is LLM_Generated, provide the value generated based on the user query and what the step in the sub_task is handling; if Source is TOOL_Output, this should be None]
- Output Variables:
  - Name: [VARIABLE_NAME]
    - Description: [Description of the expected output]
  - Name: [VARIABLE_NAME]
    - Description: [Description of the expected output]

### Example Outputs:

#### Example 1:

Query: "What top 5 cities in usa? what is weather and news there? What does reddit say about them? What are some good restaurants there?"

TaskDecomposer's sub_task Requests:
1. sub_task 1: Top 5 Cities in the USA
Details: Display a list of the top 5 cities in the USA. Provide a brief overview of each city, including key attractions and general information.
List of Relevant TOOLs:
   - TripadvisorSearchLocation
   - Perplexity

2. sub_task 2: Weather Information for Top 5 Cities
Details: Show real-time weather information for the top 5 cities in the USA. Include temperature, weather conditions, and any relevant weather alerts.
List of Relevant TOOLs:
   - WeatherTOOL.com_Realtime_Weather_TOOL
   - WeatherTOOL.com_Forecast_Weather_TOOL
   - Perplexity

3. sub_task 3: News in Top 5 Cities
Details: Provide the latest news articles related to the top 5 cities in the USA. Include headlines, brief summaries, and links to full articles.
List of Relevant TOOLs:
   - NewsTOOLSearchByKeyWord
   - Perplexity

4. sub_task 4: Reddit Discussions on Top 5 Cities
Details: Retrieve top Reddit posts discussing the top 5 cities in the USA. Include post titles, brief descriptions, and links to the discussions.
List of Relevant TOOLs:
   - RedditTopPostsBySubreddit
   - Perplexity

5. sub_task 5: Top Restaurants in Top 5 Cities
Details: List the top-rated restaurants in the top 5 cities in the USA. Include restaurant names, ratings, reviews, and links to more details.
List of Relevant TOOLs:
   - TripadvisorSearchRestaurants
   - Perplexity


Description of TOOLs:

[Will be given to you]

Your Output:

$$CHAIN_OF_THOUGHT$$

sub_task 1: Top 5 Cities in USA Overview

- Understanding sub_task Details: 
  -We need to find what are the top 5 cities in the USA, the country.

- TOOL Selection:
  - We need to identify the top 5 cities in the USA. Perplexity is suitable for retrieving this information by synthesizing data from multiple sources.
  - To get specific location details like geoId for each city, we'll use TripadvisorSearchLocation.
    - Note: TripadvisorSearchLocation is only reliable for obtaining geoId and not longitude or latitude, and that too for well-known cities.

- Input Parameters:
  - Perplexity:
    - For Perplexity we have to consider these required input parameters  ['query']
    - query (string): Requires a search query. We'll use "What are the top 5 cities in the USA?".
  - TripadvisorSearchLocation:
    - For TripadvisorSearchLocation we have to consider these required input parameters  {'query': {'type': 'string', 'description': 'Search query for location (e.g., city name)'}}
    - query (string): Requires city names. We'll input the list of cities obtained from Perplexity.

- Source of Inputs:
  - Perplexity:
    - query: LLM_Generated based on the user's query.
  - TripadvisorSearchLocation:
    - query: TOOL_Output (sub_task 1, Step 1), using top_cities_list from Perplexity's output.

- execution_blueprint Flow:
  - Step 1: Use Perplexity to get the list of the top 5 cities.
  - Step 2: Use TripadvisorSearchLocation to obtain geoId details for each city.
    - Acknowledging that this TOOL is only reliable for well-known cities.

- Variable Naming:
  - Input variable name for Step 1: query_top_cities
  - Output variable name for Step 1: top_cities_list.
  - Input variable name for Step 2: top_cities_list (matches the output variable name).
  - Output variable name for Step 2: city_geoID_details

- Validating if what i have thought till now is correct: Yes it is correct.


sub_task 2: Weather in Top 5 Cities

- Understanding sub_task Details: 
  -We need to find what is the weather in the top 5 cities in the USA, which we found in the sub_task 1.

- TOOL Selection:
  - WeatherTOOL.com_Realtime_Weather_TOOL may not always return accurate results with city name queries.
  - Therefore, we'll use Perplexity to find the latitude and longitude of each city.
  - We'll then use WeatherTOOL.com_Realtime_Weather_TOOL with these coordinates to fetch accurate weather data.

- Input Parameters:
  - Perplexity:
    - For Perplexity we have to consider these required input parameters  ['query']
    - query (string): Queries to find latitude and longitude for each city we got from sub_task 1, Step 1.
  - WeatherTOOL.com_Realtime_Weather_TOOL:
    - For WeatherTOOL.com_Realtime_Weather_TOOL we have to consider these required input parameters  {'q': {'type': 'String', 'description': 'Query parameter based on which data is sent back. It could be one of the following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508, city name e.g.: q=Paris, US zip e.g: q=10001, UK postcode e.g: q=SW1, Canada postal code e.g: q=G2J, metar:<metar_code> e.g: q=metar:EGLL, iata:<3 digit airport code> e.g: q=iata:DXB, auto:ip for IP lookup, IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1'}}
    - q (string): Latitude and longitude in the format "lat,lon".

- Source of Inputs:
  - Perplexity:
    - query: TOOL_Output, (sub_task 1, Step 1), using top_cities_list
  - WeatherTOOL.com_Realtime_Weather_TOOL:
    - q: TOOL_Output (sub_task 2, Step 1), using city_coordinates.

- execution_blueprint Flow:
  - Step 1: Use Perplexity to find the latitude and longitude of each city.
  - Step 2: Use WeatherTOOL.com_Realtime_Weather_TOOL with these coordinates to fetch real-time weather data.

- Interdependencies:
  - Step 2 depends on Step 1 (city_coordinates) . Dependency is on the current sub_tasks step output.

- Variable Naming:
  - Input variable name for Step 1: top_cities_list (matching the output variable name from sub_task 1, Step 1).
  - Output variable name for Step 1: latitude_data and longitude_data.
  - Input variable name for Step 2: latitude and longitude (matching the output variable name from sub_task 2, Step 1).
  - Out variable name for Step 2: realtime_weather

- Validating if what i have thought till now is correct: No, i named the input varialble names wrongly for step 2, it should match the output variable names of step 1 since they are dependent on it.

Rectifying the mistake:

sub_task 2: Weather in Top 5 Cities

- Understanding sub_task Details: 
  -We need to find what is the weather in the top 5 cities in the USA, which we found in the sub_task 1.

- TOOL Selection:
  - WeatherTOOL.com_Realtime_Weather_TOOL may not always return accurate results with city name queries.
  - Therefore, we'll use Perplexity to find the latitude and longitude of each city.
  - We'll then use WeatherTOOL.com_Realtime_Weather_TOOL with these coordinates to fetch accurate weather data.

- Input Parameters:
  - Perplexity:
    - For Perplexity we have to consider these required input parameters : ['query']
    - query (string): Queries to find latitude and longitude for each city we got from sub_task 1, Step 1.
  - WeatherTOOL.com_Realtime_Weather_TOOL:
    - For WeatherTOOL.com_Realtime_Weather_TOOL we have to consider these required input parameters:  {'q': {'type': 'String', 'description': 'Query parameter based on which data is sent back. It could be one of the following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508, city name e.g.: q=Paris, US zip e.g: q=10001, UK postcode e.g: q=SW1, Canada postal code e.g: q=G2J, metar:<metar_code> e.g: q=metar:EGLL, iata:<3 digit airport code> e.g: q=iata:DXB, auto:ip for IP lookup, IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1'}}
    - q (string): Latitude and longitude in the format "lat,lon".

- Source of Inputs:
  - Perplexity:
    - query: TOOL_Output, (sub_task 1, Step 1), using top_cities_list
  - WeatherTOOL.com_Realtime_Weather_TOOL:
    - q: TOOL_Output (sub_task 2, Step 1), using city_coordinates.

- execution_blueprint Flow:
  - Step 1: Use Perplexity to find the latitude and longitude of each city.
  - Step 2: Use WeatherTOOL.com_Realtime_Weather_TOOL with these coordinates to fetch real-time weather data.

- Interdependencies:
  - Step 2 depends on Step 1 (city_coordinates) . Dependency is on the current sub_tasks step output.

- Variable Naming:
  - Input variable name for Step 1: top_cities_list (matching the output variable name from sub_task 1, Step 1).
  - Output variable name for Step 1: latitude_data and longitude_data.
  - Input variable name for Step 2: latitude_data and longitude_data (matching the output variable name from sub_task 2, Step 1). For preparing the q parameter of WeatherTOOL.com_Realtime_Weather_TOOL completely we had to use two input variables.
  - Out variable name for Step 2: realtime_weather

- Validating if what i have thought till now is correct: Yes it is correct.


sub_task 3: News in Top 5 Cities

- Understanding sub_task Details: 
  -We need to find what is the news in the top 5 cities in the USA, which we found in sub_task 1.

- TOOL Selection:
  - To fetch news articles, we'll use NewsTOOLSearchByKeyWord.
  - We can input city names directly; Perplexity is not necessary here.

- Input Parameters:
  - NewsTOOLSearchByKeyWord:
    - For NewsTOOLSearchByKeyWord there are no required input parameters. But for our purpose we will give the following parameters.
      - query (string): City names.
      - language (string): We'll set this to "en".
      - region (string): We'll set this to "US".

- Source of Inputs:
  - query: TOOL_Output (sub_task 1, Step 1), using top_cities_list.
  - language: LLM_Generated, value "en".
  - region: LLM_Generated, value "US".

- execution_blueprint Flow:
  - Step 1: Use NewsTOOL to retrieve news articles for each city.

- Interdependencies:
  - Depends on sub_task 1, Step 1 for city names. Dependency is on the output from a previous sub_tasks step which is valid.

- Variable Naming:
  - Input variable name for Step 1: top_cities_list, matching the output from sub_task 1, Step 1.
  - Output variable name for Step 1: news_articles

- Validating if what i have thought till now is correct: Yes it is correct.


sub_task 4: Reddit Discussions on Top 5 Cities

- Understanding sub_task Details: 
  -We need to find what is the top reddit discussions in the top 5 cities in the USA, which we found in the sub_task 1.

- TOOL Selection:
  - To find relevant subreddits, we'll use Perplexity.
  - To get top Reddit posts, we'll use RedditTopPostsBySubreddit.

- Input Parameters:
  - Perplexity:
    - For Perplexity we have to consider these required input parameters : ['query']
    - query (string): Queries to find subreddits for each city.
  - RedditTopPostsBySubreddit:
    - For RedditTopPostsBySubreddit we have to consider these required input parameters: {'subreddit': {'type': 'String', 'description': "The subreddit name for which to fetch top posts. Only the subreddit name should be provided, 'r/' prefix is invalid."}, 'time': {'type': 'String', 'description': 'The time period for which to fetch top posts.'}}
    - subreddit (string): Subreddit names.
    - time (string): We'll set this to "day".

- Source of Inputs:
  - Perplexity:
    - query: TOOL_Output (sub_task 1, Step 1)., using city names from top_cities_list
  - RedditTopPostsBySubreddit:
    - subreddit: TOOL_Output (sub_task 4, Step 1), using subreddits.
    - time: LLM_Generated, value "day".

- execution_blueprint Flow:
  - Step 1: Use Perplexity to find subreddits related to each city.
  - Step 2: Use Reddit TOOL to fetch top posts from these subreddits.

- Interdependencies:
  - Step 2 depends on Step 1 (subreddits).
  - Perplexity in Step 1 uses city names from sub_task 1, Step 1. Dependency is on the output from a previous sub_tasks step which is valid.

- Variable Naming:
  - Input variable name for Step 1: top_cities_list
  - Output variable name for Step 1: subreddits.
  - Input variable name for Step 2: subreddits.
  - Output variable name for Step 2: reddit_posts

- Validating if what i have thought till now is correct: Yes it is correct.


sub_task 5: Top Restaurants in Top 5 Cities

- Understanding sub_task Details: 
  -We need to find what are the top restaurants in the top 5 cities in the USA, which we found in the sub_task 1.

- TOOL Selection:
  - We'll use TripadvisorSearchRestaurants to find top restaurants using geoId.

- Input Parameters:
  - TripadvisorSearchRestaurants:
    - For TripadvisorSearchRestaurants we have to consider these required input parameters: {'locationId': {'type': 'string', 'description': 'location geoId of a place.'}}
    - locationId (string): geoId of each city.

- Source of Inputs:
  - locationId: TOOL_Output (sub_task 1, Step 2), using city_geoID_details.

- execution_blueprint Flow:
  - Step 1: Use the Tripadvisor TOOL to get top restaurants for each city.

- Interdependencies:
  - Depends on sub_task 1, Step 2 for geoId. Dependency is on the output from a previous sub_tasks step which is valid.

- Variable Naming:
  - Input variable name for Step 1: city_geoID_details, matching the output from sub_task 1, Step 2.
  - Output variable name for Step 1: top_restaurants

- Validating if what i have thought till now is correct: Yes it is correct.


Grouping sub_tasks and Interdependencies

- All sub_tasks depend on outputs from sub_task 1. Therefore, we will place all sub_tasks in Group 1.
- Ensured that each TOOL depends on at most one previous TOOL's output.
- Ensured that dependencies are on the output from a previous sub_tasks for all such sub_task steps.
- Input variables that depend on previous outputs have matching names to maintain consistency.

execution_blueprint Efficiency

- Kept the execution_blueprint minimal by:
  - Avoiding unnecessary TOOLs (e.g., not using Perplexity where not essential).
  - Avoided calling the same TOOL for same purpose multiple times by keeping such sub_tasks in the same group and sharing the TOOL output with other sub_tasks.
  - Using city names directly when possible.
  - Limiting each sub_task to essential steps only.

$$execution_blueprint$$

Group 1:

execution_blueprint for sub_task 1:

sub_task Description: Identify and provide an overview of the top 5 cities in the USA.

execution_blueprint Steps:

Step 1
- TOOL: Perplexity
- Handles: Retrieves the top 5 cities in the USA
- Input Variables:
  - Name: query_top_cities
    - Parameter: query
    - Type: string
    - Source: LLM_Generated
    - Description: Query to find the top 5 cities in the USA
    - Value: "What are the top 5 cities in the USA?"
- Output Variables:
  - Name: top_cities_list
    - Description: List of the top 5 cities in the USA

Step 2
- TOOL: TripadvisorSearchLocation
- Handles: Fetches geoID about each city
- Input Variables:
  - Name: top_cities_list
    - Parameter: query
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 1)
    - Description: List of top cities from Perplexity
    - Value: None
- Output Variables:
  - Name: city_geoID_details
    - Description: GeoID for each city

execution_blueprint for sub_task 2:

sub_task Description: Provide real-time weather information for the top 5 cities.

execution_blueprint Steps:

Step 1  
- TOOL: Perplexity  
- Handles: Fetches latitude and longitude for each top city in USA
- Input Variables:
  - Name: top_cities_list
    - Parameter: query
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 1)  
    - Description: List of top cities in USA
    - Value: None
- Output Variables:
  - Name: latitude_data
    - Description: Latitude for each top city
  - Name: longitude_data
    - Description: Longitude for each top city

Step 2
- TOOL: WeatherTOOL.com_Realtime_Weather_TOOL
- Handles: Fetches real-time weather data
- Input Variables:
  - Name: latitude_data
    - Parameter: q
    - Type: string
    - Source: TOOL_Output (sub_task 2, Step 1)
    - Description: Latitude of the top cities
    - Value: None
  - Name: longitude_data
    - Parameter: q
    - Type: string
    - Source: TOOL_Output (sub_task 2, Step 1)
    - Description: Longitutdes of the top cities
    - Value: None
- Output Variables:
  - Name: realtime_weather
    - Description: Real-time weather data for each city

execution_blueprint for sub_task 3:

sub_task Description: Display recent news articles for the top 5 cities.

execution_blueprint Steps:

Step 1
- TOOL: NewsTOOLSearchByKeyWord
- Handles: Fetches detailed news articles
- Input Variables:
  - Name: top_cities_list
    - Parameter: query
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 1)
    - Description: City names which can used as query keyword for searching news
    - Value: None
- Output Variables:
  - Name: news_articles
    - Description: Detailed news articles for each city

execution_blueprint for sub_task 4:

sub_task Description: Display top Reddit discussions for the top 5 cities.

execution_blueprint Steps:

Step 1
- TOOL: Perplexity
- Handles: Identifies relevant subreddits for each city
- Input Variables:
  - Name: top_cities_list
    - Parameter: query
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 1)
    - Description: List of top cities
    - Value: None
- Output Variables:
  - Name: subreddits
    - Description: Relevant subreddits for each city

Step 2
- TOOL: RedditTopPostsBySubreddit
- Handles: Fetches top posts from relevant subreddits
- Input Variables:
  - Name: subreddits
    - Parameter: subreddit
    - Type: string
    - Source: TOOL_Output (sub_task 4, Step 1)
    - Description: Subreddits identified by Perplexity
    - Value: None
  - Name: time_period
    - Parameter: time
    - Type: string
    - Source: LLM_Generated
    - Description: Time period for top posts
    - Value: "day"
- Output Variables:
  - Name: reddit_posts
    - Description: Top Reddit posts for each city

execution_blueprint for sub_task 5:

sub_task Description: Display top restaurants in the top 5 cities.

execution_blueprint Steps:

Step 1
- TOOL: TripadvisorSearchRestaurants
- Handles: Searches for top restaurants in each city
- Input Variables:
  - Name: city_geoID_details
    - Parameter: locationId
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 2)
    - Description: geoId of each city
    - Value: None
- Output Variables:
  - Name: top_restaurants
    - Description: List of top restaurants in each city

#### Example 2:

Query: "what are the hotel options in new york city from 10th october 2024 to 12th october 2024.  Also what will the weather be like then?"

TaskDecomposer's sub_task Requests:
1. sub_task 1: Hotel Options in New York City
List of Relevant TOOLs:
   - TripadvisorSearchLocation
   - TripadvisorSearchHotels
   - Perplexity

2. sub_task 2: Weather Forecast for New York City
List of Relevant TOOLs:
   - WeatherTOOL.com_Forecast_Weather_TOOL
   - Perplexity

Description of TOOLs:

[Will be given to you]

Your Output:

$$CHAIN_OF_THOUGHT$$

sub_task 1: Hotel Options in New York City

- Understanding sub_task Details: 
  -We need to find hotel options in New York City from 10th october 2024 to 12th october 2024.

- TOOL Selection:
  - To find hotel options in New York City for the specified dates.
  - TripadvisorSearchLocation: To obtain the geoId for New York City.
    - Note: TripadvisorSearchLocation is reliable for obtaining geoId for well-known locations, and not longitude or latitude.
  - TripadvisorSearchHotels: To retrieve hotel options using the geoId and the specified dates.
  - Perplexity: Not necessary here since we can obtain all required data using Tripadvisor TOOLs, keeping the execution_blueprint minimal.

- Input Parameters:
  - TripadvisorSearchLocation:
    - For TripadvisorSearchLocation we have to consider these required input parameters:  {'query': {'type': 'string', 'description': 'Search query for location (e.g., city name)'}}
    - query (string): The location name to search for.
  - TripadvisorSearchHotels:
    - For TripadvisorSearchHotels we have to consider these required input parameters: {'geoId': {'type': 'string', 'description': 'Geo ID of the location retrieved from the Search Location TOOL.'}, 'checkIn': {'type': 'string', 'description': 'Check-in date. Format: YYYY-MM-DD'}, 'checkOut': {'type': 'string', 'description': 'Check-out date. Format: YYYY-MM-DD'}}
    - geoId (string): The geoId obtained from TripadvisorSearchLocation.
    - checkIn (string): The check-in date in YYYY-MM-DD format.
    - checkOut (string): The check-out date in YYYY-MM-DD format.

- Source of Inputs:
  - TripadvisorSearchLocation:
    - query: LLM_Generated, value "New York City", extracted from the user's query.
  - TripadvisorSearchHotels:
    - geoId: TOOL_Output (sub_task 1, Step 1), output location_geoId from TripadvisorSearchLocation.
    - checkIn: LLM_Generated, value "2024-10-10", extracted from the user's query.
    - checkOut: LLM_Generated, value "2024-10-12", extracted from the user's query.

- execution_blueprint Flow:
  - Step 1: Use TripadvisorSearchLocation to get the geoId for New York City.
  - Step 2: Use TripadvisorSearchHotels with the geoId and dates to retrieve hotel options.

- Interdependencies:
  - Step 2 depends on Step 1 for the geoId (location_geoId). Dependency is on the current sub_tasks step output which is valid.
  - The input variable location_geoId in Step 2 must match the output variable name from Step 1.

- Variable Naming:
  - Input variable name for Step 1: location_query
  - Output variable name for Step 1: location_geoId.
  - Input variable name for Step 2: location_geoId (matching the output variable name), check_in_date, check_out_date.
  - Output variable name for Step 2: hotel_options.

sub_task 2: Weather Forecast for New York City

- Understanding sub_task Details: 
  -We need to get the weather details in New York City from 10th october 2024 to 12th october 2024.

- TOOL Selection:
  - To provide the weather forecast for New York City for the specified dates.
  - Perplexity: To obtain the latitude and longitude of New York City, as using coordinates can provide more accurate results with WeatherTOOL.com_Forecast_Weather_TOOL.
  - WeatherTOOL.com_Forecast_Weather_TOOL: To fetch the weather forecast using the coordinates and dates.

- Input Parameters:
  - Perplexity:
    - For Perplexity we have to consider these required input parameters: ['query']
    - query (string): A query to obtain the latitude and longitude of New York City.
  - WeatherTOOL.com_Forecast_Weather_TOOL:
    - For WeatherTOOL.com_Forecast_Weather_TOOL we have to consider these required input parameters:{'q': {'type': 'String', 'description': 'Query parameter based on which data is sent back. It could be one of the following: Latitude and Longitude (Decimal degree) e.g: q=48.8567,2.3508, city name e.g.: q=Paris, US zip e.g: q=10001, UK postcode e.g: q=SW1, Canada postal code e.g: q=G2J, metar:<metar_code> e.g: q=metar:EGLL, iata:<3 digit airport code> e.g: q=iata:DXB, auto:ip for IP lookup, IP address (IPv4 and IPv6 supported) e.g: q=100.0.0.1'}}
    - q (string): The latitude and longitude in "lat,lon" format.
    - dt (date): Specific dates for which the forecast is required.

- Source of Inputs:
  - Perplexity:
    - query: LLM_Generated, value "What is the latitude and longitude of New York City?", inferred from the user's query.
  - WeatherTOOL.com_Forecast_Weather_TOOL:
    - q: TOOL_Output (sub_task 2, Step 1), output nyc_coordinates from Perplexity.
    - dt: LLM_Generated, value ["2024-10-10", "2024-10-11", "2024-10-12"], extracted from the user's query.

- execution_blueprint Flow:
  - Step 1: Use Perplexity to obtain the latitude and longitude of New York City.
  - Step 2: Use WeatherTOOL.com_Forecast_Weather_TOOL with the coordinates and dates to fetch the weather forecast.

- Interdependencies:
  - Step 2 depends on Step 1 for the coordinates (nyc_coordinates). Dependency is on the current sub_tasks step output which is valid.
  - The input variable nyc_coordinates in Step 2 must match the output variable name from Step 1.

- Variable Naming:
  - Input variable name for Step 1: query_nyc_coordinates
  - Output variable for Step 1: nyc_coordinates.
  - Input variable name for Step 2: nyc_coordinates (matching the output variable name), forecast_dates.
  - Output variable name for Step 2: weather_forecast

Grouping sub_tasks and Interdependencies

- sub_task 1 and sub_task 2 do not have interdependencies between them.
- Therefore, they should be placed in different groups:
  - sub_task 1 is in Group 1.
  - sub_task 2 is in Group 2.

Dependency Limitation

- Ensured that each TOOL depends on at most one previous TOOL's output.
- All input variables that depend on previous outputs have matching names to maintain consistency.

execution_blueprint Efficiency

- Kept the execution_blueprint minimal by:
  - Using only necessary TOOLs.
  - Avoided calling the same TOOL for same purpose multiple times by keeping such sub_tasks in the same group and sharing the TOOL output with other sub_tasks.
  - Avoiding unnecessary steps like additional Perplexity calls.
  - Extracting dates directly from the user's query without additional processing.

$$execution_blueprint$$

Group 1:

execution_blueprint for sub_task 1:

sub_task Description: Retrieve hotel options in New York City for specified dates.

execution_blueprint Steps:

Step 1
- TOOL: TripadvisorSearchLocation
- Handles: Retrieves geoId for New York City
- Input Variables:
  - Name: location_query
    - Parameter: query
    - Type: string
    - Source: LLM_Generated
    - Description: Search query for New York City
    - Value: "New York City"
- Output Variables:
  - Name: location_geoId
    - Description: Geo ID for New York City

Step 2
- TOOL: TripadvisorSearchHotels
- Handles: Retrieves hotel options using geoId
- Input Variables:
  - Name: location_geoId
    - Parameter: geoId
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 1)
    - Description: Geo ID for New York City
    - Value: None
  - Name: check_in_date
    - Parameter: checkIn
    - Type: string
    - Source: LLM_Generated
    - Description: Check-in date
    - Value: "2024-10-10"
  - Name: check_out_date
    - Parameter: checkOut
    - Type: string
    - Source: LLM_Generated
    - Description: Check-out date
    - Value: "2024-10-12"
- Output Variables:
  - Name: hotel_options
    - Description: List of available hotels in New York City

Group 2:

execution_blueprint for sub_task 2:

sub_task Description: Provide weather forecast for New York City for specified dates.

execution_blueprint Steps:

Step 1  
- TOOL: Perplexity  
- Handles: Fetches latitude and longitude for New York City
- Input Variables:
  - Name: query_nyc_coordinates
    - Parameter: query
    - Type: string
    - Source: LLM_Generated 
    - Description: query to for getting latitude and longitude coordinates for New York City
    - Value: "What is the latitude and longitude coordinates for New York City"
- Output Variables:
  - Name: nyc_coordinates
    - Description: Longitude and Latitude for New York City

Step 2
- TOOL: WeatherTOOL.com_Forecast_Weather_TOOL
- Handles: Fetches weather forecast for New York City
- Input Variables:
  - Name: nyc_coordinates
    - Parameter: q
    - Type: string
    - Source: TOOL_Output (sub_task 2, Step 1)
    - Description: Longitude and Latitude for New York City
    - Value: None
  - Name: forecast_dates
    - Parameter: dt
    - Type: date
    - Source: LLM_Generated
    - Description: Forecast dates on which we have to check the weather
    - Value: "[2024-10-10, 2024-10-11, 2024-10-12]"
- Output Variables:
  - Name: weather_forecast
    - Description: Weather forecast for New York City on specified dates


#### Example 3:

Query: "What is the news in Netherlands?"

TaskDecomposer's sub_task Requests:
1. sub_task 1: Hotel Options in New York City
List of Relevant TOOLs:
   - TripadvisorSearchLocation
   - TripadvisorSearchHotels
   - Perplexity

2. sub_task 2: Weather Forecast for New York City
List of Relevant TOOLs:
   - WeatherTOOL.com_Forecast_Weather_TOOL
   - Perplexity

Description of TOOLs:

[Will be given to you]

Your Output:

$$CHAIN_OF_THOUGHT$$

sub_task 1: News in the Netherlands

- TOOL Selection:
  - The user's query is "What is the news in Netherlands?"
  - We can directly use the NewsTOOLSearchByKeyWord TOOL to fetch news articles related to the Netherlands.
  - Perplexity is not necessary here since we can use the country name directly as the search query.
  - We should avoid using the region parameter in the NewsTOOL if we are unsure about the exact region code or if it might limit the results in unintended ways.

- Input Parameters:
  - NewsTOOLSearchByKeyWord:
    - For NewsTOOLSearchByKeyWord there are no required input parameters. But for our purpose we will give the following parameters.
      - query (string): The keyword or phrase to search for in news articles.
      - language (string): The language of the news articles. This is optional but can be set to "en" for English.
      - region (string): The region or country code. Since we are not sure about the correct region code for the Netherlands in the TOOL, it's best to omit this parameter to ensure we don't miss relevant articles.

- Source of Inputs:
  - query: LLM_Generated, value "Netherlands", directly extracted from the user's query.
  - language: LLM_Generated, value "en", assuming the user wants news articles in English.
  - We will not use the region parameter to avoid potential issues with incorrect or restrictive region codes.

- execution_blueprint Flow:
  - Step 1: Use NewsTOOLSearchByKeyWord to fetch recent news articles about the Netherlands using the keyword and language parameters.

- Interdependencies:
  - As this is a single-step execution_blueprint, there are no interdependencies with other steps or sub_tasks.

- Variable Naming:
  - Input Variables:
    - news_query (for the query parameter)
    - news_language (for the language parameter)
  - Output Variables:
    - news_articles

- Grouping sub_tasks and Interdependencies:
  - Since there's only one sub_task, it will be placed in Group 1.
  - There are no dependencies on other sub_tasks.

- Dependency Limitation:
  - The TOOL call does not depend on any previous TOOL outputs.

- execution_blueprint Efficiency:
  - The execution_blueprint is minimal and straightforward, using only one TOOL call.
  - By avoiding unnecessary parameters like region, we reduce the risk of errors and ensure we retrieve the most comprehensive set of news articles.


$$execution_blueprint$$

- TOOL: NewsTOOLSearchByKeyWord
- Handles: Fetches news articles for Netherlands
- Input Variables:
  - Name: vacation_spots_list
    - Parameter: query
    - Type: string
    - Source: LLM_Generated
    - Description: query should be Netherlands
    - Value: "Netherlands"
  - Name: language
    - Parameter: language
    - Type: string
    - Source: LLM_Generated
    - Description: Language for news articles
    - Value: en
- Output Variables:
  - Name: news_articles
    - Description: News articles for Netherlands


#### Example 4:

Query: "Identify upcoming music festivals worldwide over the next three months (currently it is October 2024) and their exact dates, find affordable flights to these destinations from New York, and check recent Reddit threads for attendee experiences or tips."

TaskDecomposer's sub_task Requests:
1. sub_task 1: Upcoming Music Festivals Worldwide
Details: Display a list of upcoming music festivals worldwide over the next three months, including their exact dates and locations. The sub_task should provide a brief description of each festival and any notable artists or events associated with them.
List of Relevant TOOLs:
   - Perplexity

2. sub_task 2: Affordable Flights to Music Festival Destinations
Details: Find and display affordable flights from New York to the destinations of the identified music festivals. Include details such as airlines, prices, and travel dates. Ensure the flights align with the festival dates.
List of Relevant TOOLs:
   - SkyScrapperFlightSearch
   - SkyScrapperSearchAirport
   - Perplexity

3. sub_task 3: Reddit Threads on Music Festival Experiences
Details: Retrieve and display recent Reddit threads discussing attendee experiences or tips for the identified music festivals. Include the top posts with user comments and ratings.
List of Relevant TOOLs:
   - RedditTopPostsBySubreddit
   - Perplexity

Description of TOOLs:

[Will be given to you]

Your Output:

$$CHAIN_OF_THOUGHT$$

sub_task 1: Upcoming Music Festivals Worldwide

- Understanding sub_task Details:
  - The sub_task aims to display a list of upcoming music festivals worldwide over the next three months (October 2024 to December 2024), including their exact dates, locations, descriptions, and notable artists.

- TOOL Selection:
  - Perplexity: To retrieve and synthesize up-to-date information on upcoming music festivals worldwide, including all required details.

- Input Parameters:
  - Perplexity requires the parameter query (string): The user's question or search term.

- Source of Inputs:
  - query_music_festivals: LLM_Generated, value: "List upcoming music festivals worldwide from October 2024 to December 2024 with exact dates, locations, descriptions, and notable artists."

- execution_blueprint Flow:
  - Step 1: Use Perplexity to obtain information on upcoming music festivals over the next three months.

- Interdependencies:
  - Since this is the first sub_task and a single-step execution_blueprint, there are no interdependencies with other sub_tasks or steps.

- Variable Naming:
  - Input Variable:
    - query_music_festivals (for parameter query)
  - Output Variable:
    - music_festivals_list

- Validation:
  - Perplexity requires only the query parameter.
  - Variable names are unique and match those in the updated execution_blueprint.
  - The execution_blueprint is minimal and efficient.

sub_task 2: Affordable Flights to Music Festival Destinations

- Understanding sub_task Details:
  - The sub_task aims to find and display affordable flights from New York to the destinations of the identified music festivals.
  - Include details such as airlines, prices, and travel dates, ensuring the flights align with the festival dates.

- TOOL Selection:
  - Perplexity: To extract festival locations and dates from the music_festivals_list obtained in sub_task 1.
  - SkyScrapperSearchAirport: To find airport details (skyIds and entityIds) for New York and festival destinations.
  - SkyScrapperFlightSearch: To search for flights using the airport details and dates.

- Input Parameters:
  - Perplexity (Step 1):
    - Requires parameter query (string): We'll input music_festivals_list to extract locations and dates.
  - SkyScrapperSearchAirport (Step 2 and Step 3):
    - Requires parameter query (string): Name of the location where the airport is situated.
  - SkyScrapperFlightSearch (Step 4):
    - Requires parameters:
      - originSkyId (string)
      - destinationSkyId (string)
      - originEntityId (string)
      - destinationEntityId (string)
      - date (string): Departure or travel date in YYYY-MM-DD format.

- Source of Inputs:
  - Step 1:
    - music_festivals_list: TOOL_Output (sub_task 1, Step 1)
  - Step 2:
    - origin_location_query: LLM_Generated, value: "New York"
  - Step 3:
    - festival_locations_dates: TOOL_Output (sub_task 2, Step 1)
  - Step 4:
    - nyc_airport_details: TOOL_Output (sub_task 2, Step 2)
    - festival_airport_details: TOOL_Output (sub_task 2, Step 3)
    - festival_locations_dates: TOOL_Output (sub_task 2, Step 1)

- execution_blueprint Flow:
  - Step 1: Use Perplexity to extract festival locations and dates from music_festivals_list.
  - Step 2: Use SkyScrapperSearchAirport to get airport details for New York.
  - Step 3: Use SkyScrapperSearchAirport to get airport details for each festival destination.
  - Step 4: Use SkyScrapperFlightSearch to find affordable flights using the airport details and festival dates.

- Interdependencies:
  - Step 2 depends on LLM_Generated input.
  - Step 3 depends on Step 1 (festival_locations_dates).
  - Step 4 depends on Step 2 (nyc_airport_details), Step 3 (festival_airport_details), and Step 1 (festival_locations_dates).
  - Each TOOL depends on at most one previous TOOL's output per input variable.
  - Input variable names that depend on previous outputs match the output variable names to ensure consistency.

- Variable Naming:
  - Input Variables:
    - Step 1:
      - music_festivals_list (from sub_task 1, Step 1)
    - Step 2:
      - origin_location_query (LLM_Generated)
    - Step 3:
      - festival_locations_dates (from sub_task 2, Step 1)
    - Step 4:
      - nyc_airport_details (from sub_task 2, Step 2)
      - festival_airport_details (from sub_task 2, Step 3)
      - festival_locations_dates (from sub_task 2, Step 1)
  - Output Variable:
    - festival_locations_dates
    - flight_options

- Validation:
  - Each TOOL depends on at most one previous TOOL's output per input variable.
  - Variable names are unique and match those in the updated execution_blueprint.
  - The execution_blueprint complies with dependency limitations.

sub_task 3: Reddit Threads on Music Festival Experiences

- Understanding sub_task Details:
  - Retrieve and display recent Reddit threads discussing attendee experiences or tips for the identified music festivals.
  - Include top posts with user comments and ratings.

- TOOL Selection:
  - Perplexity: To identify relevant subreddits or search terms for each music festival.
  - RedditTopPostsBySubreddit: To fetch top Reddit posts from relevant subreddits.

- Input Parameters:
  - Perplexity (Step 1):
    - Requires parameter query (string): We'll input music_festivals_list to find relevant subreddits.
  - RedditTopPostsBySubreddit (Step 2):
    - Requires parameters:
      - subreddit (string): The subreddit name.
      - time (string): The time period for which to fetch top posts.

- Source of Inputs:
  - Step 1:
    - festival_locations_dates: TOOL_Output (sub_task 1, Step 1)
  - Step 2:
    - festival_subreddits: TOOL_Output (sub_task 3, Step 1)
    - time_period: LLM_Generated, value: "month"

- execution_blueprint Flow:
  - Step 1: Use Perplexity to identify relevant subreddits or search terms for each music festival.
  - Step 2: Use RedditTopPostsBySubreddit to retrieve top posts from the identified subreddits.

- Interdependencies:
  - Step 1 depends on sub_task 1, Step 1 (music_festivals_list).
  - Step 2 depends on Step 1 (festival_subreddits).
  - Input variable names that depend on previous outputs match the output variable names to ensure consistency.

- Variable Naming:
  - Input Variables:
    - Step 1:
      - music_festivals_list (from sub_task 1, Step 1)
    - Step 2:
      - festival_subreddits (from sub_task 3, Step 1)
      - time_period (LLM_Generated)
  - Output Variable:
    - festival_subreddits
    - reddit_posts

- Validation:
  - Each TOOL depends on at most one previous TOOL's output per input variable.
  - Variable names are unique and match those in the updated execution_blueprint.
  - The execution_blueprint is minimal and efficient.

---

Grouping sub_tasks and Interdependencies

- sub_tasks 1, 2, and 3 are interdependent:
  - sub_task 2 depends on sub_task 1 for music_festivals_list.
  - sub_task 3 depends on sub_task 1 for music_festivals_list.
- Therefore, all sub_tasks are placed in Group 1.

Dependency Limitation and execution_blueprint Adjustments

- Ensured that each TOOL input depends on at most one previous TOOL's output.
- Adjusted variable names to match the output variable names in the updated execution_blueprint provided.
- Avoided multiple dependencies for any single TOOL input.

execution_blueprint Efficiency

- Kept the execution_blueprint minimal by:
  - Using only necessary TOOLs.
  - Ensuring data flows efficiently between steps.
  - Matching variable names to maintain consistency and avoid errors.

$$execution_blueprint$$

Group 1:

execution_blueprint for sub_task 1:

sub_task Description: Identify upcoming music festivals worldwide over the next three months.

execution_blueprint Steps:

Step 1

- TOOL: Perplexity
- Handles: Retrieves upcoming music festivals with exact dates, locations, descriptions, and notable artists.
- Input Variables:
  - Name: query_music_festivals
    - Parameter: query
    - Type: string
    - Source: LLM_Generated
    - Description: Query to find upcoming music festivals worldwide from October 2024 to December 2024.
    - Value: "List upcoming music festivals worldwide from October 2024 to December 2024 with exact dates, locations, descriptions, and notable artists."
- Output Variables:
  - Name: music_festivals_list
    - Description: List of upcoming music festivals with dates, locations, descriptions, and notable artists.

execution_blueprint for sub_task 2:

sub_task Description: Find affordable flights from New York to music festival destinations.

execution_blueprint Steps:

Step 1

- TOOL: Perplexity
- Handles: Extracts festival locations and dates from music_festivals_list.
- Input Variables:
  - Name: music_festivals_list
    - Parameter: query
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 1)
    - Description: List of music festivals to extract locations and dates.
    - Value: None
- Output Variables:
  - Name: festival_locations_dates
    - Description: Extracted locations and dates of the festivals.

Step 2

- TOOL: SkyScrapperSearchAirport
- Handles: Retrieves airport details for New York.
- Input Variables:
  - Name: origin_location_query
    - Parameter: query
    - Type: string
    - Source: LLM_Generated
    - Description: Location name for airport search.
    - Value: "New York"
- Output Variables:
  - Name: nyc_airport_details
    - Description: Airport details for New York (originSkyId, originEntityId).

Step 3

- TOOL: SkyScrapperSearchAirport
- Handles: Retrieves airport details for festival destinations.
- Input Variables:
  - Name: festival_locations_dates
    - Parameter: query
    - Type: string
    - Source: TOOL_Output (sub_task 2, Step 1)
    - Description: Festival locations for airport search.
    - Value: None
- Output Variables:
  - Name: festival_airport_details
    - Description: Airport details for festival destinations (destinationSkyId, destinationEntityId).

Step 4

- TOOL: SkyScrapperFlightSearch
- Handles: Finds affordable flights using airport details and festival dates.
- Input Variables:
  - Name: nyc_airport_details
    - Parameter: originSkyId, originEntityId
    - Type: string
    - Source: TOOL_Output (sub_task 2, Step 2)
    - Description: Airport details of New York for flight search.
    - Value: None
  - Name: festival_airport_details
    - Parameter: destinationSkyId, destinationEntityId
    - Type: string
    - Source: TOOL_Output (sub_task 2, Step 3)
    - Description: Airport details of festival destinations for flight search.
    - Value: None
  - Name: festival_locations_dates
    - Parameter: date
    - Type: string
    - Source: TOOL_Output (sub_task 2, Step 1)
    - Description: Dates of the music festivals.
    - Value: None
- Output Variables:
  - Name: flight_options
    - Description: Affordable flight options to festival destinations.

execution_blueprint for sub_task 3:

sub_task Description: Retrieve Reddit threads on music festival experiences.

execution_blueprint Steps:

Step 1

- TOOL: Perplexity
- Handles: Identifies relevant subreddits or search terms for each festival.
- Input Variables:
  - Name: music_festivals_list
    - Parameter: query
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 1)
    - Description: Names of music festivals to find relevant subreddits.
    - Value: None
- Output Variables:
  - Name: festival_subreddits
    - Description: Relevant subreddits or search terms for each festival.

Step 2

- TOOL: RedditTopPostsBySubreddit
- Handles: Fetches top posts from relevant subreddits.
- Input Variables:
  - Name: festival_subreddits
    - Parameter: subreddit
    - Type: string
    - Source: TOOL_Output (sub_task 3, Step 1)
    - Description: Subreddits identified by Perplexity.
    - Value: None
  - Name: time_period
    - Parameter: time
    - Type: string
    - Source: LLM_Generated
    - Description: Time period for top posts.
    - Value: "month"
- Output Variables:
  - Name: reddit_posts
    - Description: Top Reddit posts for each festival.

#### Example 5:

Query: "what are some 3 popular sci-fi books also provide their rating on Goodreads ratings, and find news articles about any that have been or will be adapted into movies or TV series."

TaskDecomposer's sub_task Requests:
1. sub_task 1: Popular Sci-Fi Books with Goodreads Ratings
Details: Display a list of popular science fiction books along with their ratings from Goodreads. Include details such as the book title, author, and average rating.
List of Relevant TOOLs:
   - Goodreads_Search_Book_By_Keyword
   - Perplexity

2. sub_task 2: News Articles on Sci-Fi Book Adaptations
Details: Find and display news articles about science fiction books that have been or will be adapted into movies or TV series. Include article titles, publication dates, and a brief summary.
List of Relevant TOOLs:
   - NewsTOOLSearchByKeyWord
   - Perplexity

Description of TOOLs:

[Will be given to you]

Your Output:

$$CHAIN_OF_THOUGHT$$

$$CHAIN_OF_THOUGHT$$

sub_task 1: Popular Sci-Fi Books with Goodreads Ratings

- Understanding sub_task Details:
  - The sub_task aims to display a list of 3 popular science fiction books along with their ratings from Goodreads.
  - Details to include: book title, author, average rating.

- TOOL Selection:
  - Perplexity: To retrieve a list of 3 popular sci-fi books.
    - Reasoning: The Goodreads_Search_Book_By_Keyword TOOL requires specific keywords or book titles to search effectively.
    - We cannot use general terms like "popular sci-fi books" as the keyword parameter in the Goodreads TOOL; it won't yield meaningful results.
    - Therefore, we first need to obtain specific book titles using Perplexity.
  - Goodreads_Search_Book_By_Keyword: To get the Goodreads ratings and details for the specific books obtained from Perplexity.

- Input Parameters:
  - Perplexity:
    - Requires parameter query (string): A query to find 3 popular sci-fi books.
  - Goodreads_Search_Book_By_Keyword:
    - keyword (string): The specific book titles obtained from Perplexity.

- Source of Inputs:
  - Perplexity:
    - query: LLM_Generated, value: "List 3 popular science fiction books."
  - Goodreads_Search_Book_By_Keyword:
    - For Goodreads_Search_Book_By_Keyword we have to consider these required input parameters: {'keyword': {'type': 'String', 'description': 'Search term or keyword to look up books.'}}
    - keyword: TOOL_Output (sub_task 1, Step 1), output sci_fi_books_list from Perplexity.

- execution_blueprint Flow:
  - Step 1: Use Perplexity to obtain a list of 3 popular sci-fi books.
  - Step 2: Use Goodreads_Search_Book_By_Keyword to retrieve ratings and details for each book obtained in Step 1.

- Interdependencies:
  - Step 2 depends on Step 1 for the sci_fi_books_list.
  - The input variable sci_fi_books_list in Step 2 must match the output variable name from Step 1.

- Variable Naming:
  - Input Variable for Step 1:
    - Name: query_sci_fi_books (for parameter query)
  - Output Variable for Step 1:
    - Name: sci_fi_books_list
  - Input Variable for Step 2:
    - Name: sci_fi_books_list (matching the output from Step 1)
  - Output Variable for Step 2:
    - Name: goodreads_ratings

- Validation:
  - The Goodreads_Search_Book_By_Keyword TOOL requires specific book titles or keywords.
  - Using general terms like "popular sci-fi books" as the keyword may not return accurate results from goodreads TOOL directly.
  - Therefore, obtaining specific book titles from Perplexity is necessary for effective use of the Goodreads TOOL.

sub_task 2: News Articles on Sci-Fi Book Adaptations

- Understanding sub_task Details:
  - The sub_task aims to find and display news articles about sci-fi books that have been or will be adapted into movies or TV series.
  - Include article titles, publication dates, and brief summaries.

- TOOL Selection:
  - Perplexity: To identify which sci-fi books from the list have been or will be adapted into movies or TV series.
  - NewsTOOLSearchByKeyWord: To find news articles about these adaptations.

- Input Parameters:
  - Perplexity:
    - Requires parameter query (string): A query to find adaptations of books from sci_fi_books_list.
  - NewsTOOLSearchByKeyWord:
    - For NewsTOOLSearchByKeyWord there are no required input parameters. But for our purpose we will give the following parameters.
    - query (string): Keywords related to the identified adaptations.
    - language (string): Set to "en" for English articles.

- Source of Inputs:
  - Perplexity:
    - query: TOOL_Output (sub_task 1, Step 1), using sci_fi_books_list to find adaptation information.
  - NewsTOOLSearchByKeyWord:
    - query: TOOL_Output (sub_task 2, Step 1), output adaptation_keywords from Perplexity.
    - language: LLM_Generated, value: "en"

- execution_blueprint Flow:
  - Step 1: Use Perplexity to identify which books have been adapted and generate keywords for searching news articles.
  - Step 2: Use NewsTOOLSearchByKeyWord to find news articles about these adaptations.

- Interdependencies:
  - Step 1 depends on sub_task 1, Step 1 for sci_fi_books_list.
  - Step 2 depends on Step 1 for adaptation_keywords.

- Variable Naming:
  - Input Variable for Step 1:
    - Name: sci_fi_books_list (from sub_task 1, Step 1)
  - Output Variable for Step 1:
    - Name: adaptation_keywords
  - Input Variables for Step 2:
    - Name: adaptation_keywords (matching the output from Step 1)
    - Name: news_language
  - Output Variable for Step 2:
    - Name: news_articles

- Validation:
  - Using specific adaptation keywords improves the relevance of news articles retrieved.
  - Setting the language parameter to "en" ensures articles are in English.

- Potential Issues in the execution_blueprint:
  - In sub_task 2, Step 1, the Value field for sci_fi_books_list is set to None, which is appropriate since it depends on the output from sub_task 1, Step 1.
  - The variable names are consistent with the dependencies and follow the guidelines.

Grouping sub_tasks and Interdependencies

- Both sub_tasks are interdependent:
  - sub_task 2 depends on sub_task 1 for sci_fi_books_list.
- Therefore, both sub_tasks should be placed in Group 1.

Dependency Limitation

- Ensured that each TOOL depends on at most one previous TOOL's output.
- Input variables that depend on previous outputs have matching names to maintain consistency.

execution_blueprint Efficiency

- Kept the execution_blueprint minimal by:
  - Using only necessary TOOLs.
  - Avoiding unnecessary TOOL calls.
  - Ensuring data flows efficiently between steps.

$$execution_blueprint$$

Group 1:

execution_blueprint for sub_task 1:

sub_task Description: Display a list of 3 popular science fiction books along with their ratings from Goodreads.

execution_blueprint Steps:

Step 1
- TOOL: Perplexity
- Handles: Look for 3 popular science fiction books
- Input Variables:
  - Name: query_sci_books
    - Parameter: query
    - Type: string
    - Source: LLM_Generated
    - Description: List of 3 popular sci-fi books
    - Value: None
- Output Variables:
  - Name: sci_fi_books_list
    - Description: Keywords related to sci-fi book adaptations.

Step 2
- TOOL: Goodreads_Search_Book_By_Keyword
- Handles: Retrieves popular sci-fi books ratings on goodreads.
- Input Variables:
  - Name: sci_fi_books_list
    - Parameter: keyword
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 1)
    - Description: popular sci-fi books to search on goodreads.
    - Value: None
- Output Variables:
  - Name: goodreads_ratings
    - Description: Ratings and more information about popular sci-fi books retrieved from Perplexity in step 1.

execution_blueprint for sub_task 2:

sub_task Description: Find news articles about sci-fi books adapted into movies or TV series.

execution_blueprint Steps:

Step 1
- TOOL: Perplexity
- Handles: Identifies sci-fi books adapted into movies or TV series.
- Input Variables:
  - Name: sci_fi_books_list
    - Parameter: query
    - Type: string
    - Source: TOOL_Output (sub_task 1, Step 1)
    - Description: List of sci-fi books to find adaptations.
    - Value: None
- Output Variables:
  - Name: adaptation_keywords
    - Description: Keywords related to sci-fi book adaptations.

Step 2
- TOOL: NewsTOOLSearchByKeyWord
- Handles: Finds news articles about sci-fi book adaptations.
- Input Variables:
  - Name: adaptation_keywords
    - Parameter: query
    - Type: string
    - Source: TOOL_Output (sub_task 2, Step 1)
    - Description: Keywords for searching news articles on adaptations.
    - Value: None
- Output Variables:
  - Name: news_articles
    - Description: News articles about sci-fi book adaptations.
